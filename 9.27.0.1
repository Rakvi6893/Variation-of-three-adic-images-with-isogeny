// 9.27.0.1 x X0(2)

N:=18;
GL2:=GL(2,Integers(N));
G:=sub<GL2|[[7,5,4,1],[9,17,4,11]]>;
Grec:=CreateModularCurveRec(N,Generators(G));
Model:=FindModelOfXG(Grec,27)`psi;
x:=AssociativeArray();
P2:=ProjectiveSpace(FiniteField(3),3);
for i in [1..4] do;
    x[i]:=P2.i;
end for;
C:=Scheme(P2,Model);
Points(C);
/* {@  (2 : 2 : 0 : 1), (1 : 0 : 1 : 0), (1 : 1 : 1 : 0), (1 : 2 : 1 : 0), (0 : 1 : 0 : 0) @}*/


// Checking if (0,0,1,1) lifts

 for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 0 and Integers()!b mod 3 eq 0 and Integers()!c mod 3 eq 1 and Integers()!d mod 3 eq 1  then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for;


// Checking if (0,1,1,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 0 and Integers()!b mod 3 eq 1 and Integers()!c mod 3 eq 1 and Integers()!d mod 3 eq 1  then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 


// Checking if (0,2,1,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 0 and Integers()!b mod 3 eq 2 and Integers()!c mod 3 eq 1 and Integers()!d mod 3 eq 1  then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 


// Checking if (1,0,2,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 1 and Integers()!b mod 3 eq 0 and Integers()!c mod 3 eq 2 and Integers()!d mod 3 eq 1 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (1,1,2,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 1 and Integers()!b mod 3 eq 1 and Integers()!c mod 3 eq 2 and Integers()!d mod 3 eq 1 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (1,2,2,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 1 and Integers()!b mod 3 eq 2 and Integers()!c mod 3 eq 2 and Integers()!d mod 3 eq 1 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 


// Checking if (2,0,0,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 2 and Integers()!b mod 3 eq 0 and Integers()!c mod 3 eq 0 and Integers()!d mod 3 eq 1 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (2,1,0,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 2 and Integers()!b mod 3 eq 1 and Integers()!c mod 3 eq 0 and Integers()!d mod 3 eq 1 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (2,2,0,1) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 2 and Integers()!b mod 3 eq 2 and Integers()!c mod 3 eq 0 and Integers()!d mod 3 eq 1 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (1,0,1,0) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 1 and Integers()!b mod 3 eq 0 and Integers()!c mod 3 eq 1 and Integers()!d mod 3 eq 0 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (1,1,1,0) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 1 and Integers()!b mod 3 eq 1 and Integers()!c mod 3 eq 1 and Integers()!d mod 3 eq 0 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (1,2,1,0) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 1 and Integers()!b mod 3 eq 2 and Integers()!c mod 3 eq 1 and Integers()!d mod 3 eq 0 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 

// Checking if (0,1,0,0) lifts

for a in Integers(9) do;
for b in Integers(9) do;
for c in Integers(9) do;
for d in Integers(9) do;
if Integers()!a mod 3 eq 0 and Integers()!b mod 3 eq 1 and Integers()!c mod 3 eq 0 and Integers()!d mod 3 eq 0 then
if [a,b,c,d] in C eq true then [a,b,c,d];
end if;
else continue;
end if;
end for;end for;end for;end for; 


// None of these lift!


//9.27.0.1 x X0(5)

N:=45;
GL2:=GL(2,Integers(N));
G:=sub<GL2|[[7,41,30,13],[16,20,17,9],[24,44,10,3]]>;
Grec:=CreateModularCurveRec(N,Generators(G));
Model:=FindModelOfXG(Grec,27)`psi;
x:=AssociativeArray();
P2:=ProjectiveSpace(FiniteField(7),9);
for i in [1..10] do;
    x[i]:=P2.i;
end for;
C:=Scheme(P2,Model);
Points(C); // empty

//9.27.0.1 x X0(7)

N:=63;
GL2:=GL(2,Integers(N));
G:=sub<GL2|[[5,49,14,5],[7,32,3,4],[31,60,43,59]]>;
Grec:=CreateModularCurveRec(N,Generators(G));
Model:=FindModelOfXG(Grec,27)`psi;
x:=AssociativeArray();
P2:=ProjectiveSpace(FiniteField(2),13);
for i in [1..14] do;
    x[i]:=P2.i;
end for;
C:=Scheme(P2,Model);
Points(C);
